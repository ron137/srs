
listen              1935;
max_connections     1000;
srs_log_tank        file;
srs_log_file        ./objs/srs.log;
daemon              off;
http_api {
    enabled         on;
    listen          1985;
}
http_server {
    enabled         on;
    listen          8080;
    dir             ./objs/nginx/html;
}
stats {
    network         0;
    disk            sda sdb xvda xvdb;
}
vhost __defaultVhost__ {
    hls {
        enabled         on;
        hls_path        ./objs/nginx/html;
        hls_fragment    6;
        hls_window      60;
    }
    http_remux {
        enabled     on;
    }
    transcode {
        enabled     on;
        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;
        engine 720 {
            enabled         on;
            vfilter {
            }
            vcodec          libx264;
            vbitrate        1500;
            vfps            30;
            vwidth          720;
            vthreads        2;
            vprofile        baseline;
            vpreset         superfast;
            vparams {
                g           100;
            }
            acodec          libfdk_aac;
            abitrate        45;
            asample_rate    44100;
            achannels       2;
            aparams {
            }
            output rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];
        }
    }

    http_hooks {
        # whether the http hooks enable.
        # default off.
        enabled         on;
        # when client connect to vhost/app, call the hook,
        # the request in the POST data string is a object encode by json:
        #       {
        #           "action": "on_connect",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "tcUrl": "rtmp://video.test.com/live?key=d2fa801d08e3f90ed1e1670e6e52651a",
        #           "pageUrl": "http://www.test.com/live.html"
        #       }
        # if valid, the hook must return HTTP code 200(Status OK) and response
        # an int value specifies the error code(0 corresponding to success):
        #       0
        # support multiple api hooks, format:
        #       on_connect http://xxx/api0 http://xxx/api1 http://xxx/apiN
        on_connect      http://host.docker.internal:8085/api/v1/clients;
        # when client close/disconnect to vhost/app/stream, call the hook,
        # the request in the POST data string is a object encode by json:
        #       {
        #           "action": "on_close",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "send_bytes": 10240, "recv_bytes": 10240
        #       }
        # if valid, the hook must return HTTP code 200(Status OK) and response
        # an int value specifies the error code(0 corresponding to success):
        #       0
        # support multiple api hooks, format:
        #       on_close http://xxx/api0 http://xxx/api1 http://xxx/apiN
        on_close        http://host.docker.internal:8085/api/v1/clients http://localhost:8085/api/v1/clients;
        # when client(encoder) publish to vhost/app/stream, call the hook,
        # the request in the POST data string is a object encode by json:
        #       {
        #           "action": "on_publish",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream"
        #       }
        # if valid, the hook must return HTTP code 200(Status OK) and response
        # an int value specifies the error code(0 corresponding to success):
        #       0
        # support multiple api hooks, format:
        #       on_publish http://xxx/api0 http://xxx/api1 http://xxx/apiN
        on_publish      http://host.docker.internal:8085/api/v1/streams;
        # when client(encoder) stop publish to vhost/app/stream, call the hook,
        # the request in the POST data string is a object encode by json:
        #       {
        #           "action": "on_unpublish",
        #           "client_id": 1985,
        #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        #           "stream": "livestream", "param":"?token=xxx&salt=yyy"
        #       }
        # if valid, the hook must return HTTP code 200(Status OK) and response
        # an int value specifies the error code(0 corresponding to success):
        #       0
        # support multiple api hooks, format:
        #       on_unpublish http://xxx/api0 http://xxx/api1 http://xxx/apiN
        # on_unpublish    http://host.docker.internal:8085/api/v1/streams http://localhost:8085/api/v1/streams;
        # # when client start to play vhost/app/stream, call the hook,
        # # the request in the POST data string is a object encode by json:
        # #       {
        # #           "action": "on_play",
        # #           "client_id": 1985,
        # #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        # #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        # #           "pageUrl": "http://www.test.com/live.html"
        # #       }
        # # if valid, the hook must return HTTP code 200(Status OK) and response
        # # an int value specifies the error code(0 corresponding to success):
        # #       0
        # # support multiple api hooks, format:
        # #       on_play http://xxx/api0 http://xxx/api1 http://xxx/apiN
        # on_play         http://host.docker.internal:8085/api/v1/sessions http://localhost:8085/api/v1/sessions;
        # # when client stop to play vhost/app/stream, call the hook,
        # # the request in the POST data string is a object encode by json:
        # #       {
        # #           "action": "on_stop",
        # #           "client_id": 1985,
        # #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        # #           "stream": "livestream", "param":"?token=xxx&salt=yyy"
        # #       }
        # # if valid, the hook must return HTTP code 200(Status OK) and response
        # # an int value specifies the error code(0 corresponding to success):
        # #       0
        # # support multiple api hooks, format:
        # #       on_stop http://xxx/api0 http://xxx/api1 http://xxx/apiN
        # on_stop         http://host.docker.internal:8085/api/v1/sessions http://localhost:8085/api/v1/sessions;
        # # when srs reap a dvr file, call the hook,
        # # the request in the POST data string is a object encode by json:
        # #       {
        # #           "action": "on_dvr",
        # #           "client_id": 1985,
        # #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        # #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        # #           "cwd": "/usr/local/srs",
        # #           "file": "./objs/nginx/html/live/livestream.1420254068776.flv"
        # #       }
        # # if valid, the hook must return HTTP code 200(Status OK) and response
        # # an int value specifies the error code(0 corresponding to success):
        # #       0
        # on_dvr          http://host.docker.internal:8085/api/v1/dvrs http://localhost:8085/api/v1/dvrs;
        # # when srs reap a ts file of hls, call the hook,
        # # the request in the POST data string is a object encode by json:
        # #       {
        # #           "action": "on_hls",
        # #           "client_id": 1985,
        # #           "ip": "192.168.1.10", "vhost": "video.test.com", "app": "live",
        # #           "stream": "livestream", "param":"?token=xxx&salt=yyy",
        # #           "duration": 9.36, // in seconds
        # #           "cwd": "/usr/local/srs",
        # #           "file": "./objs/nginx/html/live/livestream/2015-04-23/01/476584165.ts",
        # #           "url": "live/livestream/2015-04-23/01/476584165.ts",
        # #           "m3u8": "./objs/nginx/html/live/livestream/live.m3u8",
        # #           "m3u8_url": "live/livestream/live.m3u8",
        # #           "seq_no": 100
        # #       }
        # # if valid, the hook must return HTTP code 200(Status OK) and response
        # # an int value specifies the error code(0 corresponding to success):
        # #       0
        # on_hls          http://host.docker.internal:8085/api/v1/hls http://localhost:8085/api/v1/hls;
        # # when srs reap a ts file of hls, call this hook,
        # # used to push file to cdn network, by get the ts file from cdn network.
        # # so we use HTTP GET and use the variable following:
        # #       [app], replace with the app.
        # #       [stream], replace with the stream.
        # #       [param], replace with the param.
        # #       [ts_url], replace with the ts url.
        # # ignore any return data of server.
        # # @remark random select a url to report, not report all.
        # on_hls_notify   http://host.docker.internal:8085/api/v1/hls/[app]/[stream]/[ts_url][param];
    }
}

